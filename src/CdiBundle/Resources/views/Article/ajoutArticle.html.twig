{% extends '::base.html.twig' %}

{% block stylesheets %}

  <link rel="stylesheet" href="http://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">

  <style>
    .form-field{display: block;margin-bottom: 5px;    }
    label{ display: inline-block; font-size: 13px; vertical-align: middle; min-width: 150px;    }
    p{ display: inline-block; font-size: 13px; vertical-align: middle; min-width: 150px;    }
    textarea{ vertical-align: top;    }
    i{ display: block; font-size: 12px;    }
    #valider{ text-align: right; margin-top: 10px;    }
    #cote-info, #periodiques-info, #motclef-info { display: none;    }
    #motclef-proposition li { width: 300px; background-color: #4e678b; font-size: 13px; color: white; margin-bottom: 5px; padding: 10px;    }
    .bouton { margin-top: 0px; padding-top: 0px; position: relative; top : 10px; display : inline-block; width: 30px;    }
    #motclef-proposition li.err { cursor : default; background-color: red;    }
    #motclef-proposition li.err:hover { cursor : default;    }
    #motclef-proposition li.link { cursor : default; font-weight: bold; font-style: italic; font-stretch: expanded; text-decoration: underline; background-color: #4e678b;    }
    #motclef-proposition li.link:hover { cursor: pointer;    }
    #motclef-proposition li:hover { cursor: pointer;    }
    #auteurs-proposition li, #auteurs2-proposition li, #auteurs3-proposition li{ width: 300px; background-color: #4e678b; font-size: 13px; color: white; margin-bottom: 5px; padding: 10px;    }
    #auteurs-proposition li:hover, #auteurs2-proposition li:hover, #auteurs2-proposition li:hover{ cursor: pointer;    }
    #popupMask {    	position: absolute;    	z-index: 200;    	top: 0px;    	left: 0px;    	width: 100%;    	height: 100%;    	opacity: .4;    	filter: alpha(opacity=40);    	background-color:transparent !important;    	background-color: #333333;   	background-image: url("maskBG.png") !important;   	background-image:none;    	background-repeat: repeat;    	display:none;    }
    #popupContainer {    	position: absolute;    	z-index: 201;    	top: 0px;    	left: 0px;    	display:none;    	padding: 0px;    }
    #popupInner {    	border: 2px solid #000000;    	background-color: #ffffff;    }
    #popupFrame {    	margin: 0px;    	width: 100%;    	height: 100%;    	position: relative;    	z-index: 202;    }
    #popupTitleBar {    	background-color: #486CAE;    	color: #ffffff;    	font-weight: bold;    	height: 1.3em;    	padding: 5px;    	border-bottom: 2px solid #000000;    	border-top: 1px solid #78A3F2;    	border-left: 1px solid #78A3F2;    	border-right: 1px solid #204095;    	position: relative;    	z-index: 203;    }
    #popupTitle {    	float:left;    	font-size: 1.1em;    }
    #popupControls {    	float: right;    	cursor: pointer;    	cursor: hand;    	z-index: 204;    }
    #auteur3 { display: none;    }
    #auteur2 { display: none;    }
    #popCloseBox { width: 30px; display: block;    }
  </style>

{% endblock %}





{% block body %}

  <h2 class="fil_ariane"><a href="{{ path('administration') }}">Administration</a> > {{ 'Ajout d\'un article'|upper }}</h2>

  <section class="section">

    <h4 style="margin: 0; text-transform: uppercase;">Informations du nouvel article :</h4>
    <p style="font-size: 13px; margin-bottom: 35px;">Saisissez les informations sur le nouvel article.</p>

    {{ form_start(form) }}
      {{ form_errors(form) }}

      {# Titre #}
      <div class="form-field">
        {{ form_label(form.titre, 'Titre :') }}
        {{ form_widget(form.titre, {'attr': {'placeholder': 'Titre'}}) }}
      </div>


      {# Cote #}
      <div class="form-field">
        {{ form_label(form.cote, 'Cote :') }}
        {{ form_widget(form.cote,{'id': 'input-cote', 'attr': {'placeholder': 'Cote', 'autocomplete': 'off', 'list':'cote-proposition'}}) }}
        <datalist id="cote-proposition">
        </datalist>
      </div>


      {# Mot clef #}
      <div class="form-field">
        {{ form_label(form.motclef, 'Mot Clef :')}}
        <input type="text" id="zone1" value="">
        {{ form_widget(form.motclef,{'id' : 'input-motclef', 'attr': {'placeholder': 'Mot Clef', 'autocomplete': 'off', 'style' : 'display : none;'}}) }}
        <img src="{{ asset('img/add.png') }}" onclick="addMotClef()" id="addMotClef" class="bouton">
        <img src="{{ asset('img/loupe.png') }}" onclick="envoiClient('Tout',$('#zone1').val(),'','','Type de notice','Rameau','','',
    										null
    										);return false;" id="rechercheRameau" class="bouton">
        <ul id="listeMotClef">

        </ul>
      </div>


      {# Groupements ou auteurs#}
      <div class="auteurs">

        {# Auteur n°1 #}
        <div class="form-field">
          {{ form_label(form.auteur, 'Collectif ou auteur :')}}
          {{ form_widget(form.auteur,{'id' : 'input-auteur', 'attr': {'class':'auteur-input','placeholder': 'Auteur ou collectif', 'autocomplete': 'off', 'list' : 'auteurs-proposition'}}) }}
          <img src="{{ asset('img/add.png') }}" onclick="addAuteur2()" id="addAuteur2" class="bouton">
          <div id="auteurs-info"></div>
          <datalist id="auteurs-proposition">
          </datalist>
        </div>

        {# Auteur n°2 #}
        <div class="form-field" id="auteur2">
          {{ form_label(form.auteur2, 'Collectif ou auteur 2 (*) :')}}
          {{ form_widget(form.auteur2,{'id' : 'input-auteur2', 'attr': {'class':'auteur-input','placeholder': 'Auteur ou collectif 2', 'autocomplete': 'off', 'list' : 'auteurs-proposition2'}}) }}
          <img src="{{ asset('img/remove.png') }}" onclick="removeAuteur2()" id="removeAuteur2" class="bouton">
          <img src="{{ asset('img/add.png') }}" onclick="addAuteur3()" id="addAuteur3" class="bouton">
          <div id="auteurs-info2"></div>
          <datalist id="auteurs-proposition2">
          </datalist>
        </div>

        {# Auteur n°3 #}
        <div class="form-field" id="auteur3">

          {{ form_label(form.auteur3, 'Collectif ou auteur 3 (*) :')}}
          {{ form_widget(form.auteur3,{'id' : 'input-auteur3', 'attr': {'class':'auteur-input','placeholder': 'Auteur ou collectif 3', 'autocomplete': 'off', 'list' : 'auteurs-proposition3'}}) }}
          <img src="{{ asset('img/remove.png') }}" onclick="removeAuteur3()" id="removeAuteur3" class="bouton">
          <div id="auteurs-info3"></div>
          <datalist id="auteurs-proposition3">
          </datalist>
        </div>

      </div>

      {# Resume #}
      <div class="form-field">
        {{ form_label(form.resume, 'Resume :') }}
        {{ form_widget(form.resume, {'id' : 'datepicker', 'attr': {'placeholder': 'resume', 'rows' : '4', 'cols' : '72'}}) }}
      </div>

      {# Date parution #}
      <div class="form-field">
        {{ form_label(form.dateParution, 'Date parution :') }}
        {{ form_widget(form.dateParution, { 'attr': {'placeholder': 'JJ/MM/AAAA'} }) }}
      </div>

      {# Nom périodique ET Numéro du périodique #}
      <div class="form-field">
        {{ form_label(form.nomPeriodique, 'Nom du périodique :') }}
        {{ form_widget(form.nomPeriodique, {'id' : 'input-periodique', 'attr': {'placeholder': 'Nom du periodique', 'autocomplete': 'off', 'list' : 'periodiques-proposition', 'name' : 'nomPeriodique', 'required' : 'on'}} ) }}
        <datalist id="periodiques-proposition">
        </datalist>

        {{ form_label(form.numeroPeriodique, 'Numéro du périodique :') }}
        {{ form_widget(form.numeroPeriodique, { 'attr': {'placeholder': 'Numéro du périodique'} }) }}
        <p id="periodiques-info"></p>
      </div>

      {# Page de début ET Page de fin #}
      <div class="form-field">
        {{ form_label(form.pageDebut, 'Page de début :') }}
        {{ form_widget(form.pageDebut, { 'attr': {'placeholder': 'Page de début'} }) }}
        {{ form_label(form.pageFin, 'Page de fin (*) :') }}
        {{ form_widget(form.pageFin, { 'attr': {'placeholder': 'Page de fin'} }) }}
      </div>


      {# Information bas de page #}
      <i>(*) : Champ facultatif</i>

      {# Bouton valider #}
      <div id="valider">
        {{ form_widget(form.save, { 'label': "Enregistrer l'article" }) }}
      </div>

    {{ form_end(form) }}

  </section>

	<div id="resultat" style="display:none"></div>

{% endblock %}

{% block javascripts %}

  {# JS gestion de la date #}
  <script src="//code.jquery.com/jquery-1.10.2.js"></script>
  <script src="http://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
  <script type="text/javascript">
    var jQuery_1_10_2 = $.noConflict(true);
    // Traduction de la date (entre autre) :
    jQuery_1_10_2(function() {
      jQuery_1_10_2( ".calendar" ).datepicker({
        altField: "datepicker",
        closeText: 'Fermer',        prevText: 'Précédent',        nextText: 'Suivant',        currentText: 'Aujourd\'hui',        monthNames: ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'],        monthNamesShort: ['Janv.', 'Févr.', 'Mars', 'Avril', 'Mai', 'Juin', 'Juil.', 'Août', 'Sept.', 'Oct.', 'Nov.', 'Déc.'],        dayNames: ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'],        dayNamesShort: ['Dim.', 'Lun.', 'Mar.', 'Mer.', 'Jeu.', 'Ven.', 'Sam.'],        dayNamesMin: ['D', 'L', 'M', 'M', 'J', 'V', 'S'],        weekHeader: 'Sem.',        dateFormat: 'dd/mm/yy'      })      .datepicker("setDate", new Date());    });
  </script>



  {# JS nom périodique #}
  <script type="text/javascript">
    $(function(){

      // Listener des changements de nom/prenom
      $('#input-periodique').on('input', function(){
        // On ré-initialise le message d'info
        $('#periodiques-info').css("display", "none").html("");
        $('#periodiques-proposition').css("display", "none").html("");

        // On rempli les nom/prenom si ils sont vides
        var nom = $(this).val();
        if(nom == ""){
          return;
        }

        // On génère l'URL de la requête AJAX
        var url = '{{ path("ajax_recherche_periodique", {'nom': 'var-nom'}) }}';
        url = url.replace("var-nom", nom);

        $.ajax({
          url: url,
          data: {
            format: 'json'
          },
          success: function(data) {
            // Si il n'y a pas de données
            if(data.length < 1){
              $('#periodiques-info').css("display", "block").html('Ce périodique n\'existe pas, il sera ajouté dans la base de données.');
              return;
            }

            // Sinon on affiche la liste
            $(data).each(function(index){
              if(!$("periodique"+this.id).length){
                var str = "<option id='"+ this.id +"'>" + this.nom + "</option>";
                $('#periodiques-proposition').append(str);
              }
            });

            $('#periodiques-proposition option').each(function(index){
              $(this).click(function(){
                var choix = $(this).html();
                $('#input-periodique').val(choix);
                $('#periodiques-proposition').css("display", "none");
                $('#periodiques-info').html('Le périodique sera importé depuis la base de donnée.');
              });
            });

          },
          type: 'GET'
        });
      });
    });
  </script>



  {# JS cote #}
  <script type="text/javascript">
    $(function(){

      // Listener des changements de nom/prenom
      $('#input-cote').on('input', function(){
        // On ré-initialise le message d'info
        $('#cote-info').css("display", "none").html("");
        $('#cote-proposition').css("display", "none").html("");

        // On rempli les nom/prenom si ils sont vides
        var nom = $(this).val();
        if(nom == ""){
          return;
        }

        // On génère l'URL de la requête AJAX
        var url = '{{ path("ajax_recherche_cote", {'nom': 'var-nom'}) }}';
        url = url.replace("var-nom", nom);

        $.ajax({
          url: url,
          data: {
            format: 'json'
          },
          success: function(data) {
            // Si il n'y a pas de données
            if(data.length < 1){
              $('#cote-info').css("display", "block").html('Cette cote n\'éxiste pas, elle sera ajouté dans la base de données.');
              return;
            }

            // Sinon on affiche la liste
            $(data).each(function(index){
              if(!$("cote"+this.id).length){
                var str = "<option id='"+ this.id +"'>" + this.nom + "</option>";
                $('#cote-proposition').append(str);
              }
            });

            $('#cote-proposition option').each(function(index){
              $(this).click(function(){
                var choix = $(this).html();
                $('#input-cote').val(choix);
                $('#cote-proposition').css("display", "none");
                $('#cote-info').html('La cote sera importé depuis la base de donnée.');
              });
            });

          },
          type: 'GET'
        });
      });
    });
  </script>


  {# JS mot clef #}
  <script type="text/javascript">
    $(function(){
      // On cache les div de proposition
      $('#motclef-info').css("display", "none");
      $('#motclef-proposition').css("display", "none");


      // Listener des changements de nom/prenom
      $('#search-motclef').click('input', function(){
        // On ré-initialise le message d'info
        $('#motclef-info').css("display", "none").html("");
        $('#motclef-proposition').css("display", "none").html("");

        // On rempli les nom/prenom si ils sont vides
        var motclef = $("#input-motclef").val();
        if(motclef == ""){
          return null;
        } else if(motclef.split(";").length > 1){
          var tmp = motclef.split("; ");
          motclef = tmp.pop();
        }

        // On génère l'URL de la requête AJAX
        var url = '{{ path("ajax_recherche_motClef", {'motClef': 'var-motclef'}) }}';
        url = url.replace("var-motclef", motclef);

        $.ajax({
          url: url,
          data: {
            format: 'json'
          },
          success: function(data) {
            // Si il n'y a pas de données
            if(data.length < 1){
              $('#motclef-info').css("display", "block").html('Aucun mot clef n\'a été trouvé sur le site de rameau.');
              return;
            } else if(data.split("=_-_-_=").length > 1){
              //Si on nous retourne une erreur du file get content
              var res = data.split("=_-_-_=");
              $('#motclef-info').css("display", "block").html(res[0]);
              $('#motclef-proposition').css("display", "block").html(res[1]);
              return;
            } else {
              // Sinon on affiche la liste
              $('#motclef-info').css("display", "block").html('Cliquez sur le mot clef si il est dans la liste :');
              $('#motclef-proposition').css("display", "block");
              $(data).each(function(index){
                if(!$("#motclef"+this.id).length){
                  var str = "<li id=\"motclef"+ this.id +"\">" + this.nom + "</li>";
                  $('#motclef-proposition').append(str);
                }
              });

              $('#motclef-proposition li').each(function(index){
                $(this).click(function(){
                  var choix = $(this).html();
                  var oldMotClef = $('#input-motclef').val();
                  $('#input-motclef').val(oldMotClef+"; "+choix);
                  $('#motclef-proposition').css("display", "none");
                  $('#motclef-info').css("display", "block").append('Le mot clef n\'a pas été trouvé sur rameau.');
                });
              });
            }
          },
          type: 'GET'
        });
      });
    });
  </script>



  {# JS nom auteur #}
  <script type="text/javascript">
    $(function(){
      // On cache les div de proposition
      $('#auteurs-info').css("display", "none").html("");
      $('#auteurs-proposition').css("display", "none").html("");


      // Listener des changements de nom/prenom
        $("#input-auteur").on('input', function(){
          // On ré-initialise le message d'info
          $('#auteurs-info').css("display", "none").html("");
          $('#auteurs-proposition').css("display", "none").html("");

          // On rempli les nom/prenom si ils sont vides
          var nom = $("#input-auteur").val();

          if(nom == ""){
            return "";
          }


          // On génère l'URL de la requête AJAX
          var url = '{{ path("ajax_recherche_auteur", {'nom': 'var-nom'}) }}';
          url = url.replace("var-nom", nom);

//copier coller td
          $.ajax({
            url: url,
            data: {
              format: 'json'
            },
            error: function() {

            },
            success: function(data) {
              // Si il n'y a pas de données
              if(data.length < 1){
                $('#auteurs-info').css("display", "block").html('Cet auteur n\'existe pas, il sera ajouté dans la base de données.');
                return;
              }

              // Sinon on affiche la liste


              $(data).each(function(index){
                  var str = "<option value=\""+ this.nom.toUpperCase() +"\">";
                  $('#auteurs-proposition').append(str);

              });

              $('#auteurs-proposition option').each(function(index){
                $(this).click(function(){
                  var choix = $(this).html();
                  $('#input-nom').val(choix);
                  $('#auteurs-proposition').css("display", "none");
                  $('#auteurs-info').html('L\'auteur sera importé depuis la base de donnée.');
                });
              });

            },
            type: 'GET'
          });
        });
      });
  </script>




  {# JS nom auteur 2 #}
  <script type="text/javascript">
    $(function(){
      // On cache les div de proposition
      $('#auteurs2-info').css("display", "none").html("");
      $('#auteurs2-proposition').css("display", "none").html("");


      // Listener des changements de nom/prenom
        $("#input-auteur2").on('input', function(){
          // On ré-initialise le message d'info
          $('#auteurs-info2').css("display", "none").html("");
          $('#auteurs-proposition2').css("display", "none").html("");

          // On rempli les nom/prenom si ils sont vides
          var nom = $("#input-auteur2").val();

          if(nom == ""){
            return "";
          }


          // On génère l'URL de la requête AJAX
          var url = '{{ path("ajax_recherche_auteur", {'nom': 'var-nom'}) }}';
          url = url.replace("var-nom", nom);

//copier coller td
          $.ajax({
            url: url,
            data: {
              format: 'json'
            },
            error: function() {

            },
            success: function(data) {
              // Si il n'y a pas de données
              if(data.length < 1){
                $('#auteurs-info2').css("display", "block").html('Cet auteur n\'existe pas, il sera ajouté dans la base de données.');
                return;
              }

              // Sinon on affiche la liste


              $(data).each(function(index){
                  var str = "<option value=\""+ this.nom.toUpperCase() +"\">";
                  $('#auteurs-proposition2').append(str);

              });

              $('#auteurs-proposition2 option').each(function(index){
                $(this).click(function(){
                  var choix = $(this).html();
                  $('#input-nom2').val(choix);
                  $('#auteurs-proposition2').css("display", "none");
                  $('#auteurs-info2').html('L\'auteur sera importé depuis la base de donnée.');
                });
              });

            },
            type: 'GET'
          });
        });
      });
  </script>



  {# JS nom auteur 3 #}
  <script type="text/javascript">
    $(function(){
      // On cache les div de proposition
      $('#auteurs-info3').css("display", "none").html("");
      $('#auteurs-proposition3').css("display", "none").html("");


      // Listener des changements de nom/prenom
        $("#input-auteur3").on('input', function(){
          // On ré-initialise le message d'info
          $('#auteurs-info3').css("display", "none").html("");
          $('#auteurs-proposition3').css("display", "none").html("");

          // On rempli les nom/prenom si ils sont vides
          var nom = $("#input-auteur3").val();

          if(nom == ""){
            return "";
          }


          // On génère l'URL de la requête AJAX
          var url = '{{ path("ajax_recherche_auteur", {'nom': 'var-nom'}) }}';
          url = url.replace("var-nom", nom);

          //La requête permet de trouver un auteur correspondant
          $.ajax({
            url: url,
            data: {
              format: 'json'
            },
            error: function() {

            },
            success: function(data) {
              // Si il n'y a pas de données
              if(data.length < 1){
                $('#auteurs-info3').css("display", "block").html('Cet auteur n\'existe pas, il sera ajouté dans la base de données.');
                return;
              }

              // Sinon on affiche la liste


              $(data).each(function(index){
                  var str = "<option value=\""+ this.nom.toUpperCase() +"\">";
                  $('#auteurs-proposition3').append(str);

              });

              $('#auteurs-proposition3 option').each(function(index){
                $(this).click(function(){
                  var choix = $(this).html();
                  $('#input-nom3').val(choix);
                  $('#auteurs-proposition3').css("display", "none");
                  $('#auteurs-info3').html('L\'auteur sera importé depuis la base de donnée.');
                });
              });

            },
            type: 'GET'
          });
        });
      });
  </script>



  {# JS Formulaire Rameau #}
  <script type="text/javascript">
    //Autorités
    //Pour connaître les filtres disponibles et les valeurs retournées par IdRef
    //Voir : http://documentation.abes.fr/aideidrefdeveloppeur/ch04.html

    var proxy;
    var idAutorite="";
    var remoteClientExist=false;
    var oFrame;
    var idrefinit=false;

    var serializer = {

      stringify: function(data){
          var message = "";
          for (var key in data) {
              if (data.hasOwnProperty(key)) {
                  message += key + "=" + escape(data[key]) + "&";
              }
          }
          return message.substring(0, message.length - 1);
      },

      parse: function(message){
          var data = {};
          var d = message.split("&");
          var pair, key, value;
          for (var i = 0, len = d.length; i < len; i++) {
              pair = d[i];
              key = pair.substring(0, pair.indexOf("="));
              value = pair.substring(key.length + 1);
              data[key] = unescape(value);
          }
          return data;
      }
    };

    function envoiProduit(index1, index1Value, filtre1, filtre1Value){
    index1Value = index1Value.replace(/'/g,"\\\'");
    //
    $('#resultat').html("");
    $('#resultat').hide();

    if (initClient()==0) {};
    oFrame = document.getElementById("popupFrame");
    if (!idrefinit){
        oFrame.contentWindow.postMessage(serializer.stringify({Init:"true"}), "*");
        idrefinit=false;
    }

    try{
      eval('oFrame.contentWindow.postMessage(serializer.stringify({Index1:\''+index1+'\',Index1Value:\''+index1Value+'\',Filtre1:\''+filtre1+"/"+filtre1Value+'\',fromApp:\'CDI\',AutoClick:\'true\'}), "*"); ');
    }
    catch(e){
            alert("oFrame.contentWindow Failed? " + e);
    }
    }


// Requête lors de l'ouverture du pop-up
    function envoiClient(index1,index1Value,index2,index2Value,filtre1,filtre1Value,filtre2,filtre2Value,zones){

      index1Value = index1Value.replace(/'/g,"\\\'");
    $('#resultat').html("");
    $('#resultat').hide();

      if (initClient()==0) {};
      oFrame = document.getElementById("popupFrame");
      if (!idrefinit){
          oFrame.contentWindow.postMessage(serializer.stringify({Init:"true"}), "*");
          idrefinit=false;
      }

      try{
        eval('oFrame.contentWindow.postMessage(serializer.stringify({Index1:\''+index1+'\',Index1Value:\''+index1Value+'\',Filtre1:\''+filtre1+"/"+filtre1Value+'\',fromApp:\'CDI\',AutoClick:\'true\'}), "*"); ');
        /*
          if (zones!=null){
              eval('oFrame.contentWindow.postMessage(serializer.stringify({Index1:\''+index1+'\',Index1Value:\''+index1Value+'\',Index2:\''+index2+'\',Index2Value:\''+index2Value+'\',Filtre1:\''+filtre1+"/"+filtre1Value+'\',Filtre2:\''+filtre2+"/"+filtre2Value+'\','+zones+',fromApp:\'CDI\',AutoClick:\'true\'}), "*"); ');
              console.log("zone");}
          if (filtre2!=null){
              eval('oFrame.contentWindow.postMessage(serializer.stringify({Index1:\''+index1+'\',Index1Value:\''+index1Value+'\',Index2:\''+index2+'\',Index2Value:\''+index2Value+'\',Filtre1:\''+filtre1+"/"+filtre1Value+'\',Filtre2:\''+filtre2+"/"+filtre2Value+'\',fromApp:\'CDI\',AutoClick:\'true\'}), "*"); ');
    console.log("filtre2");}
          else if (filtre1!=null){
              eval('oFrame.contentWindow.postMessage(serializer.stringify({Index1:\''+index1+'\',Index1Value:\''+index1Value+'\',Index2:\''+index2+'\',Index2Value:\''+index2Value+'\',Filtre1:\''+filtre1+"/"+filtre1Value+'\',fromApp:\'CDI\',AutoClick:\'true\'}), "*"); ');
    console.log("filtre1");}
          else if (index2!=null){
              eval('oFrame.contentWindow.postMessage(serializer.stringify({Index1:\''+index1+'\',Index1Value:\''+index1Value+'\',Index2:\''+index2+'\',Index2Value:\''+index2Value+'\',fromApp:\'CDI\',AutoClick:\'true\'}), "*"); ');
    console.log("index2'");}
          else{
              eval('oFrame.contentWindow.postMessage(serializer.stringify({Index1:\''+index1+'\',Index1Value:\''+index1Value+'\',fromApp:\'CDI\',AutoClick:\'true\'}), "*"); ');
    console.log("rien");}*/
      }
      catch(e){
              alert("oFrame.contentWindow Failed? " + e);
      }
    }

    function initClient(){
      if (remoteClientExist){
          showPopWin("", screen.width*0.89, screen.height*0.74, null);
          return 0;
      }

      showPopWin("", screen.width*0.89, screen.height*0.74, null);
      remoteClientExist=true;
      if (document.addEventListener){
          window.addEventListener("message", function(e){
              traiteResultat(e);
          });
      }
      else {
          window.attachEvent('onmessage', function(e){
              traiteResultat(e);
          });
      }
      document.getElementById("boutonRes").addEventListener("click",function(e){
        traiteResultat(e);
      })
      return 0;
    }

    function traiteResultat(e){
    //lorsqu'on clique sur lier la notice
    var data = serializer.parse(e.data);

    if (data["g"]!=null){
      // On rempli le champs d'ecriture :
      document.getElementById("zone1").value = data['e'];
    }
    }

    function escapeHtml(texte) {
      return texte
           .replace(/&/g, "&amp;")
           .replace(/</g, "&lt;")
           .replace(/>/g, "&gt;")
           .replace(/"/g, "&quot;")
           .replace(/'/g, "&#039;");
    }

  </script>



    {# JS popup #}
    <script type="text/javascript">
      /**
      * SUBMODAL v1.6
      * Used for displaying DHTML only popups instead of using buggy modal windows.
      *
      * By Subimage LLC
      * http://www.subimage.com
      *
      * Contributions by:
      * 	Eric Angel - tab index code
      * 	Scott - hiding/showing selects for IE users
      *	Todd Huss - inserting modal dynamically and anchor classes
      *
      * Up to date code can be found at http://submodal.googlecode.com
      */

      // Popup code
      var gPopupMask = null;
      var gPopupContainer = null;
      var gPopFrame = null;
      var gReturnFunc;
      var gPopupIsShown = false;
      var gDefaultPage = "http://www.idref.fr/autorites/autorites.html";
      var gHideSelects = false;
      var gReturnVal = null;

      var gTabIndexes = new Array();
      // Pre-defined list of tags we want to disable/enable tabbing into
      var gTabbableTags = new Array("A","BUTTON","TEXTAREA","INPUT","IFRAME");

      // If using Mozilla or Firefox, use Tab-key trap.
      if (!document.all) {
      document.onkeypress = keyDownHandler;
      }
      function addEvent(obj, evType, fn){
      if (obj.addEventListener){
        obj.addEventListener(evType, fn, false);
        return true;
      } else if (obj.attachEvent){
        var r = obj.attachEvent("on"+evType, fn);
        return r;
      } else {
        return false;
      }
      }
      function removeEvent(obj, evType, fn, useCapture){
      if (obj.removeEventListener){
        obj.removeEventListener(evType, fn, useCapture);
        return true;
      } else if (obj.detachEvent){
        var r = obj.detachEvent("on"+evType, fn);
        return r;
      } else {
        alert("Handler could not be removed");
      }
      }

      /**
      * Code below taken from - http://www.evolt.org/article/document_body_doctype_switching_and_more/17/30655/
      *
      * Modified 4/22/04 to work with Opera/Moz (by webmaster at subimage dot com)
      *
      * Gets the full width/height because it's different for most browsers.
      */
      function getViewportHeight() {
      if (window.innerHeight!=window.undefined) return window.innerHeight;
      if (document.compatMode=='CSS1Compat') return document.documentElement.clientHeight;
      if (document.body) return document.body.clientHeight;

      return window.undefined;
      }
      function getViewportWidth() {
      var offset = 17;
      var width = null;
      if (window.innerWidth!=window.undefined) return window.innerWidth;
      if (document.compatMode=='CSS1Compat') return document.documentElement.clientWidth;
      if (document.body) return document.body.clientWidth;
      }

      /**
      * Gets the real scroll top
      */
      function getScrollTop() {
      if (self.pageYOffset) // all except Explorer
      {
        return self.pageYOffset;
      }
      else if (document.documentElement && document.documentElement.scrollTop)
        // Explorer 6 Strict
      {
        return document.documentElement.scrollTop;
      }
      else if (document.body) // all other Explorers
      {
        return document.body.scrollTop;
      }
      }
      function getScrollLeft() {
      if (self.pageXOffset) // all except Explorer
      {
        return self.pageXOffset;
      }
      else if (document.documentElement && document.documentElement.scrollLeft)
        // Explorer 6 Strict
      {
        return document.documentElement.scrollLeft;
      }
      else if (document.body) // all other Explorers
      {
        return document.body.scrollLeft;
      }
      }

      /**
      * Initializes popup code on load.
      */
      function initPopUp() {
      // Add the HTML to the body
      theBody = document.getElementsByTagName('BODY')[0];
      popmask = document.createElement('div');
      popmask.id = 'popupMask';
      popcont = document.createElement('div');
      popcont.id = 'popupContainer';
      popcont.innerHTML = '' +
        '<div id="popupInner">' +
          '<div id="popupTitleBar">' +
            '<div id="popupTitle"></div>' +
            '<div id="popupControls">' +
              '<img src="./../../../../../web/img/remove.png" onclick="hidePopWin(false);" id="popCloseBox" />' +
            '</div>' +
          '</div>' +
          '<iframe src="'+ gDefaultPage +'"  style="width:50px;height:50px;background-color:transparent;" scrolling="auto" frameborder="0" allowtransparency="true" id="popupFrame" name="popupFrame" width="100%" height="100%"></iframe>' +
        '</div>';
      theBody.appendChild(popmask);
      theBody.appendChild(popcont);

      gPopupMask = document.getElementById("popupMask");
      gPopupContainer = document.getElementById("popupContainer");
      gPopFrame = document.getElementById("popupFrame");

      // check to see if this is IE version 6 or lower. hide select boxes if so
      // maybe they'll fix this in version 7?
      var brsVersion = parseInt(window.navigator.appVersion.charAt(0), 10);
      if (brsVersion <= 6 && window.navigator.userAgent.indexOf("MSIE") > -1) {
        gHideSelects = true;
      }

      // Add onclick handlers to 'a' elements of class submodal or submodal-width-height
      var elms = document.getElementsByTagName('a');
      for (i = 0; i < elms.length; i++) {
        if (elms[i].className.indexOf("submodal") == 0) {
          // var onclick = 'function (){showPopWin(\''+elms[i].href+'\','+width+', '+height+', null);return false;};';
          // elms[i].onclick = eval(onclick);
          elms[i].onclick = function(){
            // default width and height
            var width = 400;
            var height = 200;
            // Parse out optional width and height from className
            params = this.className.split('-');
            if (params.length == 3) {
              width = parseInt(params[1]);
              height = parseInt(params[2]);
            }
            showPopWin(this.href,width,height,null); return false;
          }
        }
      }
      }


      /**
      * @argument width - int in pixels
      * @argument height - int in pixels
      * @argument url - url to display
      * @argument returnFunc - function to call when returning true from the window.
      * @argument showCloseBox - show the close box - default true
      */
      function showPopWin(url, width, height, returnFunc, showCloseBox) {
      // show or hide the window close widget
      if (showCloseBox == null || showCloseBox == true) {
        document.getElementById("popCloseBox").style.display = "block";
      } else {
        document.getElementById("popCloseBox").style.display = "none";
      }
      gPopupIsShown = true;
      disableTabIndexes();
      gPopupMask.style.display = "block";
      gPopupContainer.style.display = "block";
      // calculate where to place the window on screen
      centerPopWin(width, height);

      var titleBarHeight = parseInt(document.getElementById("popupTitleBar").offsetHeight, 10);


      gPopupContainer.style.width = width + "px";
      gPopupContainer.style.height = (height+titleBarHeight) + "px";

      setMaskSize();

      // need to set the width of the iframe to the title bar width because of the dropshadow
      // some oddness was occuring and causing the frame to poke outside the border in IE6
      gPopFrame.style.width = parseInt(document.getElementById("popupTitleBar").offsetWidth, 10) + "px";
      gPopFrame.style.height = (height) + "px";

      // set the url
      //gPopFrame.src = url;

      gReturnFunc = returnFunc;
      // for IE
      if (gHideSelects == true) {
        hideSelectBoxes();
      }

      //window.setTimeout("setPopTitle();", 6000);
      }
      addEvent(window, "load", initPopUp);
      //
      var gi = 0;
      function centerPopWin(width, height) {
      if (gPopupIsShown == true) {
        if (width == null || isNaN(width)) {
          width = gPopupContainer.offsetWidth;
        }
        if (height == null) {
          height = gPopupContainer.offsetHeight;
        }

        //var theBody = document.documentElement;
        var theBody = document.getElementsByTagName("BODY")[0];
        //theBody.style.overflow = "hidden";
        var scTop = parseInt(getScrollTop(),10);
        var scLeft = parseInt(theBody.scrollLeft,10);

        setMaskSize();

        //window.status = gPopupMask.style.top + " " + gPopupMask.style.left + " " + gi++;

        var titleBarHeight = parseInt(document.getElementById("popupTitleBar").offsetHeight, 10);

        var fullHeight = getViewportHeight();
        var fullWidth = getViewportWidth();

        gPopupContainer.style.top = (scTop + ((fullHeight - (height+titleBarHeight)) / 2)) + "px";
        gPopupContainer.style.left =  (scLeft + ((fullWidth - width) / 2)) + "px";
        //alert(fullWidth + " " + width + " " + gPopupContainer.style.left);
      }
      }
      addEvent(window, "resize", centerPopWin);
      addEvent(window, "scroll", centerPopWin);
      window.onscroll = centerPopWin;


      /**
      * Sets the size of the popup mask.
      *
      */
      function setMaskSize() {
      var theBody = document.getElementsByTagName("BODY")[0];

      var fullHeight = getViewportHeight();
      var fullWidth = getViewportWidth();

      // Determine what's bigger, scrollHeight or fullHeight / width
      if (fullHeight > theBody.scrollHeight) {
        popHeight = fullHeight;
      } else {
        popHeight = theBody.scrollHeight;
      }

      if (fullWidth > theBody.scrollWidth) {
        popWidth = fullWidth;
      } else {
        popWidth = theBody.scrollWidth;
      }

      gPopupMask.style.height = popHeight + "px";
      gPopupMask.style.width = popWidth + "px";
      }

      /**
      * @argument callReturnFunc - bool - determines if we call the return function specified
      * @argument returnVal - anything - return value
      */
      function hidePopWin(callReturnFunc) {
      gPopupIsShown = false;
      var theBody = document.getElementsByTagName("BODY")[0];
      theBody.style.overflow = "";
      restoreTabIndexes();
      if (document.getElementById("for")!=null)
        document.getElementById("for").style.display = 'block';
      if (gPopupMask == null) {
        return;
      }
      gPopupMask.style.display = "none";
      gPopupContainer.style.display = "none";
      if (callReturnFunc == true && gReturnFunc != null) {
        // Set the return code to run in a timeout.
        // Was having issues using with an Ajax.Request();
        gReturnVal = window.frames["popupFrame"].returnVal;
        window.setTimeout('gReturnFunc(gReturnVal);', 1);
      }
      gPopFrame.src = gDefaultPage;
      // display all select boxes
      if (gHideSelects == true) {
        displaySelectBoxes();
      }

      }

      /**
      * Sets the popup title based on the title of the html document it contains.
      * Uses a timeout to keep checking until the title is valid.
      */
      function setPopTitle() {
      return;
      if (window.frames["popupFrame"].document.title == null) {
        window.setTimeout("setPopTitle();", 10);
      } else {
        document.getElementById("popupTitle").innerHTML = window.frames["popupFrame"].document.title;
      }
      }

      // Tab key trap. iff popup is shown and key was [TAB], suppress it.
      // @argument e - event - keyboard event that caused this function to be called.
      function keyDownHandler(e) {
        if (gPopupIsShown && e.keyCode == 9)  return false;
      }

      // For IE.  Go through predefined tags and disable tabbing into them.
      function disableTabIndexes() {
      if (document.all) {
        var i = 0;
        for (var j = 0; j < gTabbableTags.length; j++) {
          var tagElements = document.getElementsByTagName(gTabbableTags[j]);
          for (var k = 0 ; k < tagElements.length; k++) {
            gTabIndexes[i] = tagElements[k].tabIndex;
            tagElements[k].tabIndex="-1";
            i++;
          }
        }
      }
      }

      // For IE. Restore tab-indexes.
      function restoreTabIndexes() {
      if (document.all) {
        var i = 0;
        for (var j = 0; j < gTabbableTags.length; j++) {
          var tagElements = document.getElementsByTagName(gTabbableTags[j]);
          for (var k = 0 ; k < tagElements.length; k++) {
            tagElements[k].tabIndex = gTabIndexes[i];
            tagElements[k].tabEnabled = true;
            i++;
          }
        }
      }
      }


      /**
      * Hides all drop down form select boxes on the screen so they do not appear above the mask layer.
      * IE has a problem with wanted select form tags to always be the topmost z-index or layer
      */
      function hideSelectBoxes() {
      var x = document.getElementsByTagName("SELECT");

      for (i=0;x && i < x.length; i++) {
        x[i].style.visibility = "hidden";
      }
      }

      /**
      * Makes all drop down form select boxes on the screen visible so they do not
      * reappear after the dialog is closed.
      *
      * IE has a problem with wanting select form tags to always be the
      * topmost z-index or layer.
      */
      function displaySelectBoxes() {
      var x = document.getElementsByTagName("SELECT");

      for (i=0;x && i < x.length; i++){
        x[i].style.visibility = "visible";
      }
      }
    </script>




  {# JS ajout/suppr mot clef #}
    <script src="https://code.jquery.com/jquery-1.10.2.js"></script>
    <script type="text/javascript">
      function addMotClef() {
          if (document.getElementById("zone1").value.length > 2){
            var ul = document.getElementById("listeMotClef");
            var li = document.createElement("li");
            li.appendChild(document.createTextNode(document.getElementById("zone1").value));

            li.setAttribute("id", document.getElementById("zone1").value);
            li.addEventListener("click", remove, false);
            ul.appendChild(li);
            document.getElementById("zone1").value = '';
            remplissageMotClef();
          }else{
            window.alert("Veuillez saisir un mot clef valide.")
          }
      }

      function remove(event){
        this.remove();
        remplissageMotClef();
        return false;
      }

      function remplissageMotClef(){
        document.getElementById("input-motclef").value = '';
        var lis = document.getElementById("listeMotClef").getElementsByTagName("li");
        for (var i = 0; i < lis.length; ++i) {
          document.getElementById("input-motclef").value = document.getElementById("input-motclef").value.concat(lis[i].id + ";");  // L'appel de myNodeList.item(i) n'est pas nécessaire en JavaScript
        }
      }
//Ajout d'un champ auteur
      function addAuteur2(){
        document.getElementById("auteur2").style.display = "block";
        document.getElementById("addAuteur2").style.display = "none";
        document.getElementById("input-auteur").required = true;
      }

      function addAuteur3(){
        document.getElementById("auteur3").style.display = "block";
        document.getElementById("removeAuteur2").style.display = "none";
        document.getElementById("addAuteur3").style.display = "none";
        document.getElementById("input-auteur2").required = true;
      }
//Supression d'un champ auteur
      function removeAuteur2(){
        document.getElementById("auteur2").style.display = "none";
        document.getElementById("addAuteur2").style.display = "inline-block";
        document.getElementById("input-auteur2").value = "";
        document.getElementById("input-auteur").required = false;
      }

      function removeAuteur3(){
        document.getElementById("auteur3").style.display = "none";
        document.getElementById("removeAuteur2").style.display = "inline-block";
        document.getElementById("addAuteur3").style.display = "inline-block";
        document.getElementById("input-auteur3").value = "";
        document.getElementById("input-auteur2").required = false;
      }
    </script>

{% endblock %}
